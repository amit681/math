https://www.hackerearth.com/practice/math/number-theory/primality-tests/practice-problems/algorithm/coprcopr/


// C++ program to find number of unordered 
// coprime pairs of integers from 1 to N 
#include <bits/stdc++.h> 
using namespace std; 
#define N 10000005 
#define int long long 
// to store euler's totient function 
int phi[N]; 
 
// to store required answer 
int S[N]; 
 
// Computes and prints totient of all numbers 
// smaller than or equal to N. 
void computeTotient() 
{ 
	// Initialise the phi[] with 1 
	for (int i = 1; i < N; i++) 
		phi[i] = i; 
 
	// Compute other Phi values 
	for (int p = 2; p < N; p++) { 
 
		// If phi[p] is not computed already, 
		// then number p is prime 
		if (phi[p] == p) { 
 
			// Phi of a prime number p is 
			// always equal to p-1. 
			phi[p] = p - 1; 
 
			// Update phi values of all 
			// multiples of p 
			for (int i = 2 * p; i < N; i += p) { 
 
				// Add contribution of p to its 
				// multiple i by multiplying with 
				// (1 - 1/p) 
				phi[i] = (phi[i] / p) * (p - 1); 
			} 
		} 
	} 
} 
 
// function to compute number coprime pairs 
void CoPrimes() 
{ 
	// function call to compute 
	// euler totient function 
	computeTotient(); 
 
	// prefix sum of all euler totient function values 
	for (int i = 1; i < N; i++) 
		S[i] = S[i - 1] + phi[i]; 
} 
 
// Driver code 
int32_t main() 
{ 
	// function call 
	CoPrimes(); 
    int t;
    cin >> t;
    while(t--) {
        int n;
        cin >> n;
        cout << S[n] << "\n";
    }
 
	return 0; 
} 
